
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a06  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d2  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c6  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	5c c0       	rjmp	.+184    	; 0x102 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	09 d0       	rcall	.+18     	; 0xbc <main>
  aa:	49 c0       	rjmp	.+146    	; 0x13e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <uart0_init>:

void uart1_string(char* str)
{
	while (*str)
	uart1_write(*str++);
}
  ae:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  b2:	89 b9       	out	0x09, r24	; 9
  b4:	88 e9       	ldi	r24, 0x98	; 152
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <main>:
int motor_state = 0;

int main(void)
{	
	int i;
	DDRD = 0xFF; // motor data port
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
	
	uart0_init(BAUDRATE(9600));	// Bluetooth connection
  c0:	87 e6       	ldi	r24, 0x67	; 103
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	f4 df       	rcall	.-24     	; 0xae <uart0_init>
	
    while (1)
    {
		if(motor_state)
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ce:	89 2b       	or	r24, r25
  d0:	d1 f3       	breq	.-12     	; 0xc6 <main+0xa>
  d2:	11 c0       	rjmp	.+34     	; 0xf6 <main+0x3a>
		{
			for(i=0; i<4; i++)
			{
				PORTD = (1 << i);
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	08 2e       	mov	r0, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x24>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x20>
  e4:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef e3       	ldi	r30, 0x3F	; 63
  e8:	fc e9       	ldi	r31, 0x9C	; 156
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x34>
  f0:	00 00       	nop
	
    while (1)
    {
		if(motor_state)
		{
			for(i=0; i<4; i++)
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x3e>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	91 05       	cpc	r25, r1
  fe:	54 f3       	brlt	.-44     	; 0xd4 <main+0x18>
 100:	e2 cf       	rjmp	.-60     	; 0xc6 <main+0xa>

00000102 <__vector_18>:
		}
    }
}

ISR(USART0_RX_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	unsigned char buf = UDR0;
 110:	8c b1       	in	r24, 0x0c	; 12
	
	if(buf == '0') motor_state = 0;
 112:	80 33       	cpi	r24, 0x30	; 48
 114:	29 f4       	brne	.+10     	; 0x120 <__vector_18+0x1e>
 116:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	08 c0       	rjmp	.+16     	; 0x130 <__vector_18+0x2e>
	else if(buf == '1') motor_state = 1;
 120:	81 33       	cpi	r24, 0x31	; 49
 122:	31 f4       	brne	.+12     	; 0x130 <__vector_18+0x2e>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
